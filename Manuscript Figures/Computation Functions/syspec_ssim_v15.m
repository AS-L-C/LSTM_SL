function [systp, ffun, gfun] = syspec_ssim_v15()
% Interference = BIAS
ffun = @ffun_ssim_v15; gfun = @gfun_ssim_v13;   %Int=(1-c)

systp.systemName = 'ssim15'; % 6 States: 
systp.isDiscrete = 1;

% Specify system's dimensions
dim.nx = 10;
dim.ny = 1;
dim.nu = 1;

% Specify ground-truth initial conditions (and ranges) if known
systp.x0 = [0 0 0 0 0 0 0 0 0 0]';
%  {'x_ufa',    'x_fa',  'x_sa',  'x_usa',    'x_pe',   'x_ne',   'e_p', 'e_n', 'l^p', 'l^n'};
systp.ranges.x0.lb = -[.1 .1 .1 .1 .1 .1 .1 .1 .1 .1]';
systp.ranges.x0.ub =  [.1 .1 .1 .1 .1 .1 .1 .1 .1 .1]';
systp.ranges.x.lb  = [-1*ones(4,1); 0; -1; -0; -1; 0; 0];
systp.ranges.x.ub  = [1*ones(4,1);  1;  0;  0; -1; 1; 1];
systp.xSigma = (systp.ranges.x.ub - systp.ranges.x.lb)/6;

% Specify system's ground truth parameters (and ranges) if known
systp.p          =  [.5 .5, .5, .5,...
                    .5 .5   .5  .5,  ...
                     0.1,    0.10     .9   .5,...
                     .5, .5,...
                     .4, .4, .4... 
                     .4 .3 .2 .1,...
                     .5, .5,...
                     .05,...
                     .5, .5,...
                      1]';
systp.pnames     =  {'a_{uf}',     'a_f',    'a_s',   'a_{us}',...
                     'b_{uf}^0',   'b_f^0',  'b_s^0', 'b_{us}^0'...
                     'c_{uf}',     'c_{f}',  'c_{s}', 'c_{us}',...
                     'a_{et}',     'b_{et}', ...
                     'mu',         'sig1',    'sig2'...
                     'bias_{uf}',  'bias_{f}','bias_{s}', 'bias_{us}',...
                     'a_{err}',    'b_{err}',...
                     'th',...
                     'a_l','b_l',...
                     'd'};
                  
systp.pShNames   =  {'a_uf',   'a_f',   'a_s', 'a_us'... 
                     'b0uf',   'b0f',   'b0s', 'b0us'...
                     'c_uf',   'c_f',   'c_s', 'c_us'...
                     'a_et',   'b_et',...
                     'mu',    'sig1',  'sig2'...    
                     'bi_uf',  'bi_f','bi_s', 'bi_us',...
                     'a_err',   'b_err',...
                     'th',...
                     'a_l','b_l',...
                     'd'};

%systp.ranges.p.lb  =   [.3      .3      .95        0       .1       0.1           0.01      0 ]'; 
%systp.ranges.p.ub  =   [.95      1       1       .1       .3        1            .7         1 ]'; 

systp.ranges.p.lb  =   [.7       .7        .5    0.5, ...
                        0         0        0       0,...  
                        0          0,       0,      0,...,... ,....5,        .5,       .5,    .5,
                        0          0,...
                        0          50              0.08,...  % Sigmoid(5, 0) %binormal 0          0       0,...%-.9       0.3,...   %-1.2 .5      
                        0          0       0       0,...
                        0.98        0,...
                        0,...
                        0,         0.05,...
                        0]'; 
systp.ranges.p.ub  =   [1          1      1      1,...   
                        .2         .2     .2      .2,...
                        1           1      1       1,...
                        1           .001,...
                        1           200     .3,... %Sigmoid(500, .5) - %Binormal: .5           1       2,...%0,          1,...
                        1           1       1      1,...
                        .999           .1,...10^-5,...
                        .2,...
                        .9,           .4,...
                        1]'; 
systp.pSigma = (systp.ranges.p.ub - systp.ranges.p.lb)/6;

% Define names for legends
    % Inputs
%     cnames = cell(1,dim.nu);
%     for i=1:dim.nu
%        cnames{i} = ['u_' num2str(i) '(t)'];
%     end
    systp.uNames = 'u'; %This is "Imposed speed difference"

    % Outputs
%     cnames = cell(1,dim.ny);
%     for i=1:dim.ny
%        cnames{i} = ['y_' num2str(i) '(t)'];
%     end
    systp.yNames = 'SLA';

    %States
%     cnames = cell(1,dim.nx);
%     for i=1:dim.nx
%        cnames{i} = ['x_' num2str(i) '(t)'];
%     end
systp.xNames   = {'x_{uf}^a', 'x_f^a', 'x_s^a', 'x_{us}^a', 'x^{pe}', 'x^{ne}', 'e^p', 'e^n', 'l^p', 'l^n'};
systp.xShNames = {'x_ufa',    'x_fa',  'x_sa',  'x_usa',    'x_pe',   'x_ne',   'e_p', 'e_n', 'l^p', 'l^n'};
dim.np = length(systp.p)    ;
systp.dim = dim;

end