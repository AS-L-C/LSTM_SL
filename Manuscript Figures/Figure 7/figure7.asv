%% Figure 7

clc
close all
clear all

%% Initializations---------------------------------------------------------
my_set_default(16,1,3)
fsize.big     = 20;
fsize.nor     = 18;
fsize.small   = 16;
fsize.lab     = 16;
fsize.tickLAb = 14;

co.st  = [.4 .4 .4];
co.ea  = [.2 .2 .2];
co.end = [0 0 0];
epCols = [co.st; co.ea; co.end; co.st; co.end; co.st; co.ea; co.end; co.st; co.end];

nrnc = [7,4];
spInd = {1:4, 5:16, [21 25], [22 26], [23 24 27 28]};
% Load InterferenceSavings data
% load('..\..\Research_Pitt_AS\Data\IntereferenceData_Oct_29_2018\Preprocessed\IS\IndvSubjectsData_preprocessed_v3.mat')
load('..\Data\Experimental\IS_preprocessed_v3.mat')

% Extract info
p.i = summary.p{1}; %Interference pert
p.s = summary.p{2}; %Savings pert
p.tr.i = [150, 150+600, 1950,  2100, 2700];  %Transitions
p.i(p.tr.i) = nan;
p.s(p.tr.i) = nan;

% Initialize plot params
n.strTot = 2850;
del = .035;
faceAlphaCon = .2;
sa.SV=.02; sa.SH=0.001; sa.MR=.005; sa.ML=.05; sa.MT=.045; sa.MB=.075;

allc = get(groot,'defaultAxesColorOrder');

% Groups
gr.names = {'Interference', 'Savings'};
gr.cols = {allc(2,:), allc(1,:)};

% Conditions
con.def = {[1 150], [151 750], [751,750+1200], [1951,2100], [2101,2700], [2701,2850]};
con.col = {[1 1 1], allc(5,:) + [0 .2 0], allc(2,:),        [1 1 1],    allc(5,:) + [0 .2 0],  [1 1 1]};
con.names = {'N', 'A_1', 'B', 'N_S', 'A_2', 'WO'};

% Epochs
ep.def = {[151, 155], [201, 230], [721,750], [1951, 1955], [2071, 2100], [2101 2105], [2151 2180], [2671 2700], [2701 2705], [2821, 2850]};
% ep.names = {'A1_{START}', 'A1_{EARLY}' , 'A1_{END}', 'NS_{START}', 'NS_{END}', 'A2_{START}', 'A2_{EARLY}' , 'A2_{END}', 'WO_{START}', 'WO_{END}'};
% ep.names = {'A1-Start', 'A1-Early' , 'A1-End', 'NS-Start', 'NS-End', 'A2-Start', 'A2-Early' , 'A2-End', 'WO-Start', 'WO-End'};
ep.names = {'Start', 'Early' , 'End', 'Start', 'End', 'Start', 'Early' , 'End', 'Start', 'End'};

% fh=figure('Color', 'w', 'units','normalized','outerposition',[0 0 1 1]);
fh=figure('Color', 'w');

%% 1st row: Plot of experimental paradigm----------------------------------
h = subaxis(nrnc(1), nrnc(2), spInd{1}, 'SV', sa.SV, 'MR', sa.MR, 'ML', sa.ML, 'SH', sa.SH, 'MT', sa.MT, 'MB', sa.MB);

%Patches
x = nan(1,4); y=x;
for c = 1:6
    addPatches(c, con, del, faceAlphaCon)
    
    % Insert condition names
    if c~=3
        text(mean(con.def{c}), .5, con.names{c}, 'FontSize', fsize.nor, 'HorizontalAlignment', 'center')
    else
        text(mean(con.def{c}), -.5, con.names{c}, 'FontSize', fsize.nor, 'HorizontalAlignment', 'center')
        text(mean(con.def{c}), .5, 'N_L', 'FontSize', fsize.nor, 'HorizontalAlignment', 'center')
    end
    
end

% Add perturbation timecourses
ll(1) = plot(p.s+del); hold on,
ll(2) = plot(p.i-del);
ll(1).LineWidth = 3; ll(2).LineWidth = 3;
xticks([])
ylab(1) = ylabel('Belt-Speed Ratio','FontSize', fsize.lab);
yticks([-1 0 1])
yticklabels({'2:1', '1:1', '1:2'});
axis tight
legend(ll,'Savings','Interference', 'Location', 'southwest', 'Orientation', 'horizontal')
% ca=gca;
h.FontSize   = fsize.nor;
% title('Perturbation Protocol')

%% 2nd row: Plot of adaptation timecourse----------------------------------
h = subaxis(nrnc(1), nrnc(2), spInd{2}, 'SV', sa.SV, 'MR', sa.MR, 'ML', sa.ML, 'SH', sa.SH, 'MT', sa.MT, 'MB', 0);


for ig = [2 1]
    %     scatter(1:n.strTot, summary.m{ig}, 20,  gr.cols{ig}, 'filled');
    hold on, [lh(ig), shadh(ig)] = boundedline(1:n.strTot, summary.m{ig}, summary.se{ig}, '-o', 'nan', 'gap');
    lh(ig).LineWidth = 1;
    lh(ig).Color  = gr.cols{ig};
    lh(ig).MarkerFaceColor = gr.cols{ig};
    shadh(ig).FaceColor = gr.cols{ig}; shadh(ig).FaceAlpha = .5;
    axis tight
end
YLdata = ylim();
YLfin = YLdata + [-.2 0];

% Add patches
dpatch = .05;
for c = 1:6
    addPatches(c, con, dpatch, faceAlphaCon, YLfin)
end

ylim(YLfin)

% Add epochs' names and horizonal lines
for e = 1:10
    addEpochs(e, ep, YLdata, fsize.small, epCols(e,:));
end

ylab(2) = ylabel('Step Length Asymmetry', 'FontSize', fsize.lab);
xlabel('Strides','FontSize', fsize.lab)
xticks(p.tr.i + 1);
set(gca, 'TickLength',[0 0])

% ca=gca;
h.FontSize = fsize.nor;

% ylim([-1.05 .77]);
yticks([-.5 0 .5]);
% yticklabels('FontSize', fsize.small)

%% 3rd row (1/3): Plot of first 100 strides during A1 [A1(1-100)]----------
dmr=0;
dsh = .025;
A1zoom = 151:250;
hzoom(1) = subaxis(nrnc(1), nrnc(2), spInd{3}, 'SV', sa.SV, 'MR', sa.MR + dmr, 'ML', sa.ML, 'SH', sa.SH + dsh, 'MT', sa.MT, 'MB', sa.MB);
for ig = [2 1]
    %     scatter(1:n.strTot, summary.m{ig}, 20,  gr.cols{ig}, 'filled');
    hold on, [lh(ig), shadh(ig)] = boundedline(A1zoom, summary.m{ig}(A1zoom),...
             summary.se{ig}(A1zoom), '-o', 'nan', 'gap');
    lh(ig).LineWidth = 1;
    lh(ig).Color  = gr.cols{ig};
    lh(ig).MarkerFaceColor = gr.cols{ig};
    shadh(ig).FaceColor = gr.cols{ig}; shadh(ig).FaceAlpha = .5;
end
axis tight
xticks(A1zoom([1, 50, end]))
% set(gca, 'TickLength',[0 0])
% hzoom(1).XAxis.Visible = 'off';
ylab(3)=ylabel('Step Length Asymmetry', 'FontSize', fsize.lab);
yticks([-.6, -.3 0])
ytickformat('%.1f');
xlabel('Strides');
XL1 = xlim();
text()

%% 3rd row (2/3): Plot of first 100 strides during A2 [A2(1-100)]----------
A2zoom = 2101:2200;
hzoom(2) = subaxis(nrnc(1), nrnc(2), spInd{4}, 'SV', sa.SV, 'MR', sa.MR + dmr, 'ML', sa.ML, 'SH', sa.SH + dsh, 'MT', sa.MT, 'MB', sa.MB);
for ig = [2 1]
    %     scatter(1:n.strTot, summary.m{ig}, 20,  gr.cols{ig}, 'filled');
    hold on, [lh(ig), shadh(ig)] = boundedline(A2zoom, summary.m{ig}(A2zoom),...
             summary.se{ig}(A2zoom), '-o', 'nan', 'gap');
    lh(ig).LineWidth = 1;
    lh(ig).Color  = gr.cols{ig};
    lh(ig).MarkerFaceColor = gr.cols{ig};
    shadh(ig).FaceColor = gr.cols{ig}; shadh(ig).FaceAlpha = .5;
end

linkaxes(hzoom,'y')
YL = ylim();
ylim([YL(1), 0])
% set(gca, 'TickLength',[0 0])
yticks([-.6, -.3 0])
yticklabels([]);
xticks(A2zoom([1, 50, end]))

hzoom(1).FontSize = fsize.nor;
hzoom(2).FontSize = fsize.nor;
xlabel('Strides');

addPatch(XL1, YL, con.col{1,2}, faceAlphaCon, hzoom(1));
addPatch(xlim(), YL ,con.col{1,2}, faceAlphaCon, hzoom(2));

text(h)

%% 3rd row (3/3): Plot barplots-----------------------------------------
% load('C:\Users\Alessandro\Dropbox\Research_Pitt_AS\Data\IntereferenceData_Oct_29_2018\dataForBarPlots.mat')
load('..\Data\Experimental\IS_barplotData.mat')

% my_set_default(20,2,18);
% plotBarplot(ts, n, Tadj)
h = subaxis(nrnc(1), nrnc(2), spInd{end}, 'SV', sa.SV, 'MR', sa.MR + dmr, 'ML', sa.ML, 'SH', sa.SH + dsh, 'MT', sa.MT, 'MB', sa.MB);

Ttemp = Tadj;
Ttemp(11:13,:) = Tadj(14:16,:);
Ttemp(14:16,:) = Tadj(11:13,:);
Tadj = Ttemp;

offs = .05;
% function plotBarplot(ts, n, Tadj)
Y = [ts.means.Sav ts.means.Int];
gn = {'Sav','Int'};
figure(1), hb = bar(Y);
xc = hb(1).XData';
X = [xc + hb(1).XOffset, xc + hb(2).XOffset];
E = [ts.ses.Sav ts.ses.Int];
Yp = Y>0; Yn = ~Yp;
YE = Y;
YE(Yp) = YE(Yp) + E(Yp);
YE(Yn) = YE(Yn) - E(Yn);
yh = max(YE(:)) + offs;
% yl = min(YE(:)) - offs;
yl = YE(6,2) - offs;
yvl = yl - 6*offs;
for g=1:n.gr
    hold on, errorbar(X(:,g), Y(:,g), E(:,g),'k.', 'LineWidth', 2);
end
% legLoc = [0.68    0.25    0.3    0.06];
% lh = legend({'Sav','Int'},'Orientation','horizontal','AutoUpdate','off','Position',legLoc, 'Units', 'normalized', 'Box', 'off');


% Comparison between groups
on = [1 1];
xc = mean(X,2);
for e=1:n.epochs
    if Tadj.bonfSign(e)==1
        ccol = [0 0 0];
        cls = '-';
    else
        ccol = [0 0 0];
        cls = ':';
    end
    
    line(X(e,:), yh*on, 'Color',ccol, 'LineStyle', cls);
    for ig=1:2
        line(X(e,ig)*on, [yh yh-offs/2], 'Color',ccol, 'LineStyle', cls)
    end
    %     if Tadj.pvaladj(e)>0.05
    %         str = 'n.s.'; fs = 18; delta = .025;
    %     elseif Tadj.pvaladj(e)<0.01
    %         str = '**'; fs = 30; delta = 0;
    %     else
    %         str = '*';  fs = 30; delta = 0;
    %     end
    [str, delta, fs]= getStr(Tadj.pvaladj(e),'up');
    if ~isempty(str)
        text(xc(e),yh+delta,str,'FontSize',fs,'HorizontalAlignment','center','VerticalAlignment','middle', 'Color', ccol);
    end
end

% Comparison across time
eComps = [1 6; 2 7; 3 8];
grOld = [2 1];
linIndComp = 1;
for c = 1:3
    for g=1:n.gr
        indcomp = (Tadj.EpochA==eComps(c,1)) & (Tadj.EpochB==eComps(c,2)) & (Tadj.GroupA==grOld(g)) & (Tadj.GroupB==grOld(g));
        
        cx = [X(eComps(c,1),g) X(eComps(c,2),g)];
        cy = (yvl+offs*(linIndComp));
        
        % Line Color
        if Tadj.bonfSign(indcomp)==1
            ccol = [0 0 0];
            cls = '-';
        else
            ccol = [0 0 0];
            cls = ':';
        end
        
        % Horizontal lines
        lh(1) = line(cx, on*cy, 'Color', ccol, 'LineStyle', cls);
        
        % Vertical lines
        for i=1:2
            %             line(cx(i)*on, [cy+offs/2 cy], 'Color', [0 0 0]);
            lh(i+1) = line(cx(i)*on, [YE(eComps(c,i),g)- offs/2, cy], 'Color', ccol,  'LineStyle', cls);
        end
        
        % Determine string
        [str, delta, fs]= getStr(Tadj.pvaladj(indcomp),'down');
        if ~isempty(str)
            text(mean(cx),cy-delta,str,'FontSize',fs,'HorizontalAlignment','center','VerticalAlignment','middle', 'Color', ccol);
        end
        
        linIndComp = linIndComp+1;
    end
end
%%
h.FontSize = fsize.nor;
mStr = {'  *P<.05'
        ' **P<.005'
        '***P<.0005'} ;
% axPos = get(gca,'position');
% text(legLoc(1)+axPos(1), legLoc(2)-axPos(2)-.01, mStr,'Units', 'normalized', 'FontSize', 20, 'VerticalAlignment', 'middle')
text(.85, .25, mStr,'Units', 'normalized', 'FontSize', fsize.small, 'VerticalAlignment', 'middle')

ylim([-.8 .5]) ;
yticks([-.5 0 .5]);
% ylab(3) = ylabel('Step Length Asymmetry');
set(gca,'XTickLabel',ep.names)
h.XAxis.FontSize = fsize.small;
xlabel('Epochs', 'FontSize' , fsize.nor);
XL = xlim();
YL = ylim();

% Add Condition Name
xloc = [mean(X(2,:)), mean([X(4,2), X(5,1)]), mean(X(7,:)), mean([X(9,2), X(10,1)]) ];
ccomp = [2 4 5 6] ;
for ic = 1:4
    text(xloc(ic), YL(2), con.names{ccomp(ic)}, 'FontSize', fsize.small, ...
        'HorizontalAlignment', 'center', 'VerticalAlignment', 'top' )
end

% Add patches

epDef = [[XL(1) mean([X(3,2) X(4,1)])]; ...
         [mean([X(5,2) X(6,1)]) mean([X(8,2) X(9,1)]) ]];
epCol = [2 5];
for iep=1:2
    cep = epCol(iep);
    addPatch(epDef(iep,:), YL, con.col{1,cep}, faceAlphaCon);
end

% Fix ylabel (alignment)
% ylab(1).FontSize = fsize.big;
% ylab(2).FontSize = fsize.big;
% ylab(3).FontSize = fsize.big;
% p1 = get(ylab(1), 'Pos');
% p2 = get(ylab(2), 'Pos');
% p3 = get(ylab(3), 'Pos');
%
% ylab(1).Position = [p2(1), p1(2:3)];
% ylab(3).Position = [p2(1), p3(2:3)];

% Change color of ticklabels
ax = gca;
for i = 1:10
    ax.XTickLabel{i} = sprintf('\\color[rgb]{%f,%f,%f}%s', ...
       epCols(i,:) , ax.XTickLabel{i});
end

function [str, delta, fs] = getStr(pv,mod)
astFs = 25;
if pv>0.05
    str = 'n.s.'; fs = 18; delta(1)=0.025; delta(2) = .018;
    str = [];
elseif pv<0.0005
    str = '***'; fs = astFs; delta(1)=0; delta(2) = 0.028;
elseif pv<0.005
    str = '**'; fs = astFs; delta(1)=0; delta(2) = 0.028;
elseif pv<0.05
    str = '*';  fs = astFs; delta(1)=0; delta(2) = .028;
else
    str = 'nan';
end
if strcmp(mod,'up')
    delta = -delta(2);
else
    delta = delta(2);
end
end

function addPatches(c, con, dy, faceAlpha, varargin)
if isempty(varargin)
    ymin = -1;
    ymax = 1;
else
    YL = varargin{1};
    ymin = YL(1);
    ymax = YL(2);
end
if c~=3
    x([1 4]) = con.def{c};
    x([2 3]) = con.def{c};
    y([1 4]) = ymin - dy;
    y([2 3]) = ymax + dy;
    ccol = con.col{c};
    hold on, ch = patch(x,y,ccol,'EdgeColor','none', 'FaceAlpha',faceAlpha);
else
    % Interference protocol
    x([1 4]) = con.def{c};
    x([2 3]) = con.def{c};
    y([1 4]) = ymin - dy;
    y([2 3]) = [0 0];
    ccol = con.col{c};
    hold on, ch = patch(x,y,ccol,'EdgeColor','none', 'FaceAlpha',faceAlpha);
    
    % Savings protocol
    x([1 4]) = con.def{c};
    x([2 3])  = con.def{c};
    y([1 4])  = [0 0];
    y([2 3])  =  ymax + dy;
    %     ccol = [ 1 1 1] - .1;
    ccol = [ 1 1 1];
    hold on, ch = patch(x,y,ccol,'EdgeColor','none', 'FaceAlpha',faceAlpha);
end

uistack(ch,'bottom');

end

function addEpochs(e, ep, YL, fsize, ccol)
% delLine = .005; %Delta epoch's line
delLine = -.03; %Delta epoch's line
% if mod(e,2) == 0


%     delColor = .2;
% else
%     delColor=0;
% end
% ccol = [.5 .5 .5] - delColor;
x = ep.def{e};
% Vertical lines
%     line(x(1)*[1 1], [-1-del, 1+del], 'Color',[.5 .5 .5],'LineStyle','-', 'LineWidth', 1)
%     line(x(2)*[1 1], [-1-del, 1+del], 'Color',[.5 .5 .5],'LineStyle','-', 'LineWidth', 1)

% Horizontal lines
if any(e == [1 4 6 9 2 7])
    x(2) = x(2) + 5;
elseif any(e == [3 5 8 10])
    x(1) = x(1) - 5;
end
hold on, line(x, [YL(1)-delLine]*ones(1,2), 'Color',ccol,'LineStyle','-', 'LineWidth', 4)

%     % Vertical text (v1)
%     hold on, th = text(x(1), -1, ep.names{e},'FontSize', 16, 'color', [.5 .5 .5] - delc, 'VerticalAlignment', 'cap');
%     set(th,'Rotation', 90);

% Horizontal text (v2)
el1    = [2 3 5 7 8 10]; %Epochs on row 1
leftAl = [1 2 4 6 7 9];

if any(e==el1) %If line 1
    delyString = .025;%
else
    delyString = .025 + 0.1; %Vertical displacement for epochs on line 2
end
delyString = delyString - .05;

if any(e==leftAl)
    horAlignment = 'left';
    xpos = x(1);
else
    horAlignment = 'right';
    xpos = x(2);
end
hold on, th = text(xpos, YL(1) - delyString, ep.names{e},'FontSize', fsize,...
    'color', ccol, 'VerticalAlignment', 'cap' , 'HorizontalAlignment', horAlignment);

% Add vertical line from epoch's definition to its string
if ~any(e==el1) %Row 2
    hold on, line(mean(x)*ones(2,1), [YL(1) - delLine, YL(1) - delyString], 'Color', ccol, 'LineWidth', 1)
end
%       a = annotation('textarrow',x,y,'String','y = x ');

end

function addPatch(xs, ys, col, faceAlpha, varargin)
if ~isempty(varargin)
    ax = varargin{1};
else
    ax = gca;
end
    X = [xs(1) xs(1) xs(2) xs(2)];
    Y = [ys(1) ys(2) ys(2) ys(1)];
    hold on, ch = patch(ax, X,Y, col,'EdgeColor','none', 'FaceAlpha',faceAlpha);
    uistack(ch,'bottom');
end
